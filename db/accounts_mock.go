// Code generated by MockGen. DO NOT EDIT.
// Source: db/accounts.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAccountsRepository is a mock of AccountsRepository interface.
type MockAccountsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsRepositoryMockRecorder
}

// MockAccountsRepositoryMockRecorder is the mock recorder for MockAccountsRepository.
type MockAccountsRepositoryMockRecorder struct {
	mock *MockAccountsRepository
}

// NewMockAccountsRepository creates a new mock instance.
func NewMockAccountsRepository(ctrl *gomock.Controller) *MockAccountsRepository {
	mock := &MockAccountsRepository{ctrl: ctrl}
	mock.recorder = &MockAccountsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountsRepository) EXPECT() *MockAccountsRepositoryMockRecorder {
	return m.recorder
}

// CheckUsernameExists mocks base method.
func (m *MockAccountsRepository) CheckUsernameExists(ctx context.Context, username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUsernameExists", ctx, username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUsernameExists indicates an expected call of CheckUsernameExists.
func (mr *MockAccountsRepositoryMockRecorder) CheckUsernameExists(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUsernameExists", reflect.TypeOf((*MockAccountsRepository)(nil).CheckUsernameExists), ctx, username)
}

// Get mocks base method.
func (m *MockAccountsRepository) Get(ctx context.Context, username string) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, username)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAccountsRepositoryMockRecorder) Get(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccountsRepository)(nil).Get), ctx, username)
}

// Save mocks base method.
func (m *MockAccountsRepository) Save(ctx context.Context, username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockAccountsRepositoryMockRecorder) Save(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAccountsRepository)(nil).Save), ctx, username, password)
}
