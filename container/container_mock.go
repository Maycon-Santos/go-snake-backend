// Code generated by MockGen. DO NOT EDIT.
// Source: container/container.go

// Package container is a generated GoMock package.
package container

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockContainer is a mock of Container interface.
type MockContainer struct {
	ctrl     *gomock.Controller
	recorder *MockContainerMockRecorder
}

// MockContainerMockRecorder is the mock recorder for MockContainer.
type MockContainerMockRecorder struct {
	mock *MockContainer
}

// NewMockContainer creates a new mock instance.
func NewMockContainer(ctrl *gomock.Controller) *MockContainer {
	mock := &MockContainer{ctrl: ctrl}
	mock.recorder = &MockContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainer) EXPECT() *MockContainerMockRecorder {
	return m.recorder
}

// Inject mocks base method.
func (m *MockContainer) Inject(dependencies ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dependencies {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Inject", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Inject indicates an expected call of Inject.
func (mr *MockContainerMockRecorder) Inject(dependencies ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inject", reflect.TypeOf((*MockContainer)(nil).Inject), dependencies...)
}

// Retrieve mocks base method.
func (m *MockContainer) Retrieve(dependenciesAbstraction ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dependenciesAbstraction {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Retrieve", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockContainerMockRecorder) Retrieve(dependenciesAbstraction ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockContainer)(nil).Retrieve), dependenciesAbstraction...)
}
